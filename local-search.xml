<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>经典垃圾收集器</title>
    <link href="/2024/01/23/%E7%BB%8F%E5%85%B8%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <url>/2024/01/23/%E7%BB%8F%E5%85%B8%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="1、Serial收集器"><a href="#1、Serial收集器" class="headerlink" title="1、Serial收集器"></a>1、Serial收集器</h3><ul><li>单线程工作的收集器。</li><li>所有收集器里额外内存消耗最小的</li><li>新生代采用复制算法，老年代采取标记整理算法</li><li>适用于客户端</li></ul><h3 id="2、ParNew收集器"><a href="#2、ParNew收集器" class="headerlink" title="2、ParNew收集器"></a>2、ParNew收集器</h3><ul><li>Serial收集器的多线程版本</li><li>默认的收集线程数与处理器核心数量相同，可以通过-XX:ParallerGCThreads参数限制垃圾收集的线程数</li><li>用于服务端的新生代收集器，经常和CMS组合使用</li></ul><h3 id="3、Parallel-Scavenge收集器"><a href="#3、Parallel-Scavenge收集器" class="headerlink" title="3、Parallel Scavenge收集器"></a>3、Parallel Scavenge收集器</h3><ul><li>多线程的新生代收集器，采用标志复制算法，目标是达到一个可控制的吞吐量（用户程序执行的时间&#x2F;CPU总时间）</li><li>最大停顿时间：-XX:MaxGCPauseMillis，吞吐量大小：-XX:GCTimeRatio，自适应的调节策略：-XX:+UseAdaptiveSizePolicy，JVM会根据当前系统运行的情况收集性能监控信息，动态调节新生代的大小、Eden与Survivor区的比例、晋升老年代对象大小等参数以提供最合适的停顿时间和最大的吞吐量</li></ul><h3 id="4、Serial-Old收集器"><a href="#4、Serial-Old收集器" class="headerlink" title="4、Serial Old收集器"></a>4、Serial Old收集器</h3><ul><li>单线程的老年代收集器，使用标记整理算法</li><li>主要用于客户端。服务端有2种用途，一是在JDK5以及之前的版本与Parallel Scavenge收集器搭配使用，二是作为CMS收集器在并发收集发生Concurrent Mode Failure时shiyong</li></ul><h3 id="5、Parallel-Old收集器"><a href="#5、Parallel-Old收集器" class="headerlink" title="5、Parallel Old收集器"></a>5、Parallel Old收集器</h3><ul><li>多线程的老年代收集器，使用标记整理算法</li><li>在注重吞吐量或者处理器资源较为稀缺的场合，可以优先考虑Parallel Scavenge加Parallel Old组合</li></ul><h3 id="6、CMS"><a href="#6、CMS" class="headerlink" title="6、CMS"></a>6、CMS</h3><ul><li><p>以获取最短回收停顿时间为目标的收集器</p></li><li><p>收集过程：</p><ul><li><p>初始标记：STW，标记GC ROOTS能直接关联到的对象，速度很快</p></li><li><p>并发标记：从GC Roots的直接关联对象开始遍历整个对象图，垃圾线程和用户线程并发运行</p></li><li><p>重新标记：STW，修正并发标记期间，因用户程序继续运行而导致标记发生变动的那一部分对象的标记记录</p></li><li><p>并发清除：清理标记阶段判断以及死亡的对象，因为不需要移动对象，可以和用户线程并发运行</p></li></ul></li><li><p>缺点：</p><ul><li>对CPU资源非常敏感。垃圾收集时和用户线程并发执行，会因为占有一部分线程导致系统吞吐量降低，默认的线程数是（CPU核数 + 3） &#x2F; 4，当CPU核数不足4个，如果CPU负载很高，当发生垃圾收集时就可能导致用户程序的执行速度忽然大幅度降低</li><li>无法处理浮动垃圾，有可能出现Concurrent Mode Failure失败进而导致Full GC的产生。当CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次并发失败，这时候会冻结用户线程的执行，临时启用Serial Old收集器来进行老年代的垃圾收集</li><li>CMS基于标记清除算法，会有大量的内存碎片产生，可能导致无法找到足够大的连续空间而触发Full GC</li></ul></li></ul><h3 id="7、G1"><a href="#7、G1" class="headerlink" title="7、G1"></a>7、G1</h3><ul><li>基于Region的堆内存布局，把连续的Java堆划分为多个大小相等的Region，每一个Region都可以扮演Eden、Survivor、老年代，收集器能够对扮演不同角色的Region采用不同的策略回收</li><li>采用Humongous区域用来存储大对象，大对象是超过Region容量一半的对象</li><li>将Region作为最小的回收单元，每次回收的内存空间都是Region大小的整数倍，根据设定允许的收集停顿时间，优先回收价值收益最大的那些Region</li><li>运行过程：<ul><li>初始标记：仅仅标记一下GC ROOTS能直接关联的对象，并修改TAMS指针，需要STW，但耗时很短</li><li>并发标记：从GC ROOTS开始对堆中对象进行可达性分析，并重新处理SATB记录下的在并发时有引用变动的对象</li><li>最终标记：需要STW，用于处理并发阶段结束后遗留下的少量SATB记录</li><li>筛选回收：对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间制定回收计划，把决定回收的Region的存活对象复制到空的Region中，再清理掉旧的Region，。因为涉及到存活对象移动，所以需要STW，由多个线程并行完成。</li></ul></li></ul><h3 id="8、ZGC"><a href="#8、ZGC" class="headerlink" title="8、ZGC"></a>8、ZGC</h3><ul><li>基于Region的堆内存布局，根据容量分类可以分为3种<ul><li>小型Region：容量固定为2M，用于放置小于256KB的小对象</li><li>中型Region：容量固定为32M，用于放置大于等于256KB但小于4M的对象</li><li>大型Region：容量必须为2M的整数倍，用于4M或以上的大对象，每个大型Region中只存放一个大对象</li></ul></li></ul><h4 id="8-1-染色指针"><a href="#8-1-染色指针" class="headerlink" title="8.1 染色指针"></a>8.1 染色指针</h4><p>将少量的额外信息储存在指针中的技术</p><p>优势：</p><ul><li>可以使得一旦某个Region的存活对象被移走之后，这个Region立即就能够被释放和重用掉</li><li>染色指针可以大幅减少在垃圾收集过程中内存屏障的使用数量，ZGC只使用了读屏障</li><li>它可以作为一种可扩展的存储结构用来记录更多与对象标记、重定位过程相关的数据</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HotSpot算法实现细节</title>
    <link href="/2024/01/21/HotSpot%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <url>/2024/01/21/HotSpot%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h3 id="1、根节点枚举"><a href="#1、根节点枚举" class="headerlink" title="1、根节点枚举"></a>1、根节点枚举</h3><p>问题：根节点枚举采用逐个遍历耗费的时间长，所有垃圾收集器在根节点枚举会发生STW，从而导致停顿时间长</p><p>解决方案：通过OOpMap解决。当类加载完成后，HotSpot会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译的过程中，也会在特定位置记录下栈里和寄存器里哪些位置是引用。</p><h3 id="2、安全点"><a href="#2、安全点" class="headerlink" title="2、安全点"></a>2、安全点</h3><ul><li><p>导致OopMap变化的指令非常多，如果为每一条指令生成OopMap，需要大量额外的存储空间，HotSpot并没有为每条指令都生成OopMap, 而只是在安全点记录这些信息</p></li><li><p>在进行垃圾收集时，用户程序必须执行到安全点才能暂停。</p></li><li><p>安全点的选定太少会导致垃圾收集等待的时间过长，太多会导致运行时增加内存负载</p></li><li><p>安全点位置的选取是以“是否有让程序长时间执行的特征”来选定的，比如方法跳转、循环跳转、异常跳转</p></li></ul><p>发生垃圾收集时让用户线程执行到安全点：</p><ul><li>抢先式中断：发生垃圾收集时，中断所有用户线程，如果发现线程中断的不在安全点，恢复线程继续执行，让它执行到安全点上</li><li>主动式中断：当垃圾收集需要中断线程的时候，会设置一个标志位，各个线程执行过程中会不停的主动轮询这个标志，一但发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方包括安全点、创建对象和其他在堆上分配内存的地方，目的是为了检查是否即将要发生垃圾收集，避免没有足够的内存分配新对象。Hotspot使用test指令完成安全点的轮询和触发线程中断。当需要暂停用户线程时，JVM把0x160100的内存页设置为不可读，线程执行到test指令时就会产生一个自陷异常信号，然后在预先注册的异常处理器中挂起线程</li></ul><h3 id="3、安全区域"><a href="#3、安全区域" class="headerlink" title="3、安全区域"></a>3、安全区域</h3><p>当用户线程处于Sleep或Blocked状态，无法响应JVM的中断请求，不能自己走到安全的地方中断挂起</p><ul><li>安全区域确保在某一段代码片段中，引用关系不会发生变化，在这个区域进行垃圾收集是安全的</li><li>当用户线程执行到安全区域里的代码时，会标识自己已经进入安全区域了，垃圾收集不会管已经声明自己在安全区域的线程。当线程离开安全区域，会检查JVM是否已完成根节点枚举，如果没完成，就必须一直等待，直到收到可以离开安全区域的信号为止</li></ul><h3 id="4、记忆集"><a href="#4、记忆集" class="headerlink" title="4、记忆集"></a>4、记忆集</h3><ul><li>用于记录从非收集区域指向收集区域的指针集合的抽象数据结构</li><li>为了解决跨代引用所带来GC ROOTS扫描范围增加的问题</li><li>记录的精度<ul><li>字长精度：每个记录精确到一个机器字长</li><li>对象精度：每个记录精确到对象</li><li>卡精度：每个记录精确到一块内存区域</li></ul></li></ul><h3 id="5、卡表"><a href="#5、卡表" class="headerlink" title="5、卡表"></a>5、卡表</h3><ul><li>记忆集的一种实现，采用卡精度</li><li>HotSpot通过字节数组CDARD_TABLE实现，数组的每个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块叫做卡页，大小是512字节。只要卡页存在一个以上的对象的字段存在跨代指针，就将卡表对应的数组元素的值标识为1，没有则标识为0。垃圾收集时只要筛选出卡表中为1的元素，就能知道哪些卡页内存块包含跨代指针，把它们加入到GC ROOTS中一并扫描</li></ul><h3 id="6、写屏障"><a href="#6、写屏障" class="headerlink" title="6、写屏障"></a>6、写屏障</h3><ul><li>可以看作在虚拟机层面对引用类型字段赋值这个动作的AOP切面，在引用对象赋值时会产生一个环形通知，在赋值前的写屏障叫作写前屏障，在赋值后的叫写后屏障。在写屏障中完成对卡表状态的更新</li><li>卡表在高并发场景下会存在伪共享问题。解决方案是不采用无条件的写屏障，先检查卡表标记，只有当卡表元素未被标记过时才将其标记为脏，jdk7之后通过-XX:+UseCondCardMark参数，决定是否开启卡表更新的条件判断。</li></ul><h3 id="7、并发的可达性分析"><a href="#7、并发的可达性分析" class="headerlink" title="7、并发的可达性分析"></a>7、并发的可达性分析</h3><p>三色标记</p><ul><li>白色：表示对象尚未被垃圾收集器访问过</li><li>黑色：表示对象已经被垃圾收集器访问过，并且这个对象的所有引用都已经扫描过</li><li>灰色：表示对象已经被垃圾收集器访问过，但这个对象至少存在一个引用还没有被扫描过</li></ul><p>用户线程和垃圾收集线程并发情况下产生的现象：</p><ul><li><p>将原本消亡的对象标记为存活，会造成浮动垃圾，下次收集清理掉就行</p></li><li><p>把原本存活的对象标记为已死亡，会导致程序发生错误。主要有2种情况</p><ul><li><p>赋值器插入了一条或多条从黑色对象到白色对象的新引用</p></li><li><p>赋值器删除了全部从灰色对象到白色对象的直接或间接引用</p></li></ul><p>增量更新：破坏第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次</p><p>原始快照：当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>垃圾收集算法</title>
    <link href="/2024/01/21/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    <url>/2024/01/21/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1、分代收集理论"><a href="#1、分代收集理论" class="headerlink" title="1、分代收集理论"></a>1、分代收集理论</h3><p>（1）弱分代假说：绝大多数对象都是朝生夕灭</p><p>（2）强分代假说：熬过越多次垃圾收集的对象越难以消亡</p><p>（3）跨代引用假说：跨代引用相比于同代引用仅占极少数。某个新生代对象被老年代对象引用，因为老年代对象难以消亡，新生代对象随着年龄增加也会晋升为老年代，跨代引用随之消除</p><h3 id="2、标记清除算法"><a href="#2、标记清除算法" class="headerlink" title="2、标记清除算法"></a>2、标记清除算法</h3><p>标记出所有需要回收的对象，再统一进行回收</p><p>缺点：</p><ul><li>标记和清除2个过程的执行效率随对象数量增长而降低</li><li>会导致内存空间碎片化</li></ul><h3 id="3、标记复制算法"><a href="#3、标记复制算法" class="headerlink" title="3、标记复制算法"></a>3、标记复制算法</h3><h4 id="3-1-半区复制"><a href="#3-1-半区复制" class="headerlink" title="3.1 半区复制"></a>3.1 半区复制</h4><p>将内存分成大小相等的2块，每次只使用其中一块。当其中一块内存用完了，就将存活的对象复制到另外一块，把使用的内存一次性清理掉</p><p>缺点：</p><ul><li>对象多数存活会产生大量内存复制的开销</li><li>内存空间浪费较大</li></ul><p>优点：</p><ul><li>不存在内存空间碎片化问题</li></ul><h4 id="3-2-appel式回收"><a href="#3-2-appel式回收" class="headerlink" title="3.2 appel式回收"></a>3.2 appel式回收</h4><p>将新生代划分为一块较大的Eden和2块较小的Survivor，每次分配内存只使用其中一块Eden和一块Survivor，垃圾收集时将Eden和Survivor存活的对象复制到另一块Survivor中，再一次性清理掉Eden和使用过的Survivor。</p><p>改进：相比于半区复制空间浪费小，只浪费了10%的内存</p><p>问题：当Survivor不够容纳一次Young GC后存活的对象，会通过分配担保机制直接进入老年代</p><p>适用场景：常用于新生代回收</p><h3 id="4、标记整理算法"><a href="#4、标记整理算法" class="headerlink" title="4、标记整理算法"></a>4、标记整理算法</h3><p>标记所有需要回收的对象，将存活的对象向内存空间的一端移动，直接清理掉边界以外的内存</p><p>和标记清除算法的对比</p><p>优点：内存分配效率高，用户程序的吞吐量更高</p><p>缺点：需要移动对象，STW时间更长</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>判断对象存活算法</title>
    <link href="/2024/01/21/%E5%88%A4%E5%AE%9A%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E7%AE%97%E6%B3%95/"/>
    <url>/2024/01/21/%E5%88%A4%E5%AE%9A%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1.引用计数算法"></a>1.引用计数算法</h4><p>在对象中添加一个引用计数器，引用增加计数器的值加1，引用失效计数器的值减1，任何时刻对象引用计数器的值为0表示对象可以进行回收</p><p>优点：原理简单，判定效率高</p><p>缺点：很难解决循环引用问题</p><h4 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h4><p>从GC Roots出发，根据引用关系向下搜索，搜索过程走过的路径称为引用链，如果GC Roots到某个对象不可达，此对象可以进行回收</p><p>可作为GC Roots的对象：</p><ul><li>在栈帧中的本地变量表中引用的对象</li><li>在方法区中类静态属性引用的对象</li><li>在方法区中常量引用的对象</li><li>被synchronized持有的对象</li><li>JVM内部的引用，基本数据类型对应的Class对象，常驻的异常对象，系统类加载器</li><li>本地方法栈中JNI（Native方法）引用的对象</li><li>反映JVM内部情况的JMXBean，JVMT1注册的回调，本地代码缓存</li></ul><h4 id="3、引用类型"><a href="#3、引用类型" class="headerlink" title="3、引用类型"></a>3、引用类型</h4><ul><li>强引用：Object o &#x3D; new Object()。垃圾收集器不会回收掉被引用的对象</li><li>软引用：在系统即将发生OOM，垃圾收集器会回收这部分对象，通过SoftReference实现</li><li>弱引用：只能存活到下一次垃圾收集发生为止，通过WeakReference实现</li><li>虚引用：无法通过虚引用访问对象，唯一目的就是对象被回收前可以接受系统的通知，通过PhantomReference实现</li></ul><h4 id="4、两次标记"><a href="#4、两次标记" class="headerlink" title="4、两次标记"></a>4、两次标记</h4><p>判定对象是否可以回收要经历2次标记</p><ul><li>通过可达性分析算法发现不可达的对象会进行第一次标记</li><li>如果对象覆盖了finalize方法并且没有被JVM执行过，会将对象放入到F-Queue队列中，由JVM创建的Finalizer线程执行，为了避免finalize方法执行缓慢、出现死循环而造成内存回收子系统的崩溃，对象的finalize方法并不一定会执行完，如果在finalize方法中对象重新和引用链上的对象关联上，会从即将回收的集合中移除掉</li></ul><h4 id="5、回收方法区"><a href="#5、回收方法区" class="headerlink" title="5、回收方法区"></a>5、回收方法区</h4><p>回收内容主要包括：</p><p>（1）废弃的常量：不存在任何对常量的引用</p><p>（2）不再使用的类型</p><ul><li>该类及其子类的所有实例都已经被回收</li><li>加载该类的类加载器已经被回收</li><li>该类的Class对象没有在任何地方被引用</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java内存区域</title>
    <link href="/2024/01/12/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/"/>
    <url>/2024/01/12/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><h3 id="1、程序计数器"><a href="#1、程序计数器" class="headerlink" title="1、程序计数器"></a>1、程序计数器</h3><ul><li>是一块较小的内存空间</li><li>字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令</li><li>分支、循环、跳转、异常、线程恢复都需要依赖这个计数器来完成</li><li>每条线程都有一个独立的程序计数器，是线程私有的内存区域</li><li>唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域</li><li>如果线程正在执行的是一个Java方法，记录的是正在执行的字节码指令的地址，如果正在执行native方法，记录的是undefined</li></ul><h3 id="2、Java虚拟机栈"><a href="#2、Java虚拟机栈" class="headerlink" title="2、Java虚拟机栈"></a>2、Java虚拟机栈</h3><ul><li><p>是线程私有的内存区域</p></li><li><p>每个方法执行都会创建一个栈帧，栈帧中存储了局部变量表、操作数栈、动态链接、方法出口等信息，方法从调用到执行完毕对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</p></li><li><p>线程请求的栈深度大于虚拟机所允许的最大深度，会抛出StackOverflowError异常；如果Java虚拟机栈支持动态扩展，当栈扩展时无法申请到足够的内存就会抛出OOM异常</p></li></ul><h4 id="2-1-局部变量表"><a href="#2-1-局部变量表" class="headerlink" title="2.1 局部变量表"></a>2.1 局部变量表</h4><ul><li>用于存放方法参数和方法内部定义的局部变量。</li><li>在Java程序被编译成class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需分配的局部变量表的最大容量</li><li>以变量槽为最小单位，一个槽占用的内存空间由具体的实现决定，基本数据类型（除long和double）、reference、returnAddress（指向一条字节码指令的地址）占用一个槽，long和double占用2个槽</li><li>JVM通过索引定位的方法访问局部变量表，从0到最大的变量槽数。非static方法0号槽是this，其余的会按照参数列表、方法内部定义的变量顺序和作用域依次分配变量槽</li><li>为了尽可能的减少栈帧所占用的内存空间，局部变量表的变量槽是可以复用的，如果当前程序计数器的值已经超出了某个变量的作用域，这个变量对应的变量槽可以交给其他变量重用</li></ul><h4 id="2-2-操作数栈"><a href="#2-2-操作数栈" class="headerlink" title="2.2 操作数栈"></a>2.2 操作数栈</h4><h3 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h3><ul><li><p>线程私有的内存区域</p></li><li><p>为JVM使用到的本地方法服务</p></li><li><p>HotSpot将本地方法栈和虚拟机栈合二为一</p></li><li><p>在栈深度溢出和栈扩展失败时抛出StackOverflowError和OOM异常</p></li></ul><h3 id="4、堆"><a href="#4、堆" class="headerlink" title="4、堆"></a>4、堆</h3><ul><li><p>所有线程共享的一块内存区域</p></li><li><p>几乎所有的对象实例都在这里分配内存</p></li><li><p>没有内存完成对象分配，也无法扩展时抛出OOM异常</p></li></ul><h3 id="5、方法区"><a href="#5、方法区" class="headerlink" title="5、方法区"></a>5、方法区</h3><ul><li>线程共享的内存区域</li><li>存储已经被JVM加载的类型信息、常量、静态变量、即时编译器编译过的代码缓存等数据</li><li>如果方法区无法满足新的内存分配需求，将抛出OOM异常</li></ul><h3 id="6、运行时常量池"><a href="#6、运行时常量池" class="headerlink" title="6、运行时常量池"></a>6、运行时常量池</h3><ul><li>是方法区的一部分</li><li>存放编译期生成的各种字面量、符号引用和符号引用翻译出来的直接引用，运行期间可以通过String.intern方法将新的常量放入池中</li><li>无法再申请到内存时会抛出OOM异常</li></ul><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><ul><li>不是运行时数据区的一部分</li><li>受物理内存的限制抛出OOM异常</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
