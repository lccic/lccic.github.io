<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/11/hello-world/"/>
    <url>/2024/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/29/LockSupport/"/>
    <url>/2023/11/29/LockSupport/</url>
    
    <content type="html"><![CDATA[<p><code>LockSupport</code> 是 Java 并发编程中的一个工具类，它提供了一种线程阻塞和唤醒的机制，通常用于实现线程间的同步和协作。</p><p>主要的方法包括：</p><ul><li><code>park()</code>：让当前线程进入阻塞状态，等待被唤醒。</li><li><code>unpark(Thread thread)</code>：唤醒指定的线程，使其从阻塞状态恢复。</li><li><code>parkNanos(long nanos)</code>：阻塞当前线程，但最多阻塞指定的纳秒数。</li><li><code>parkUntil(long deadline)</code>：阻塞当前线程，直到指定的时间戳。</li></ul><p><code>LockSupport</code> 和 <code>synchronized</code> 都是 Java 中用于实现线程同步的机制，但它们之间有一些重要的区别：</p><p>1、<strong>粒度不同：</strong></p><ul><li><code>synchronized</code> 是基于对象的锁，它要求线程获取对象的锁才能执行 synchronized 代码块或方法。这意味着只有一个线程可以进入临界区（被锁定的代码块或方法），其他线程必须等待释放锁。</li><li><code>LockSupport</code> 是更细粒度的线程同步工具，它不依赖于对象锁。你可以针对具体线程进行阻塞和唤醒，而不是针对对象。</li></ul><p>2、<strong>灵活性：</strong></p><ul><li><code>synchronized</code> 更容易使用，但在某些情况下可能不够灵活，因为它是与对象绑定的。这意味着你只能使用 <code>synchronized</code> 来锁定对象，而无法对线程进行更复杂的操作。</li><li><code>LockSupport</code> 更灵活，你可以在不同的线程之间自由地阻塞和唤醒，无需依赖于对象锁。这使得它可以用于更复杂的线程同步和协作场景。</li></ul><p>3、<strong>非阻塞获取：</strong></p><ul><li><code>LockSupport</code> 提供了非阻塞的方式来阻塞和唤醒线程，通过 <code>parkNanos</code> 和 <code>parkUntil</code> 方法，可以设置超时时间，这意味着线程可以在一定时间内尝试获取许可，而不会一直阻塞。</li><li><code>synchronized</code> 不支持非阻塞的方式，线程只能一直等待获取锁，如果锁被其他线程持有，那么线程将一直处于阻塞状态。</li></ul><p>4、<strong>可中断性：</strong></p><ul><li>使用 <code>LockSupport</code> 可以在等待时响应中断，通过线程的 <code>interrupt</code> 方法可以中断正在等待的线程。</li><li>使用 <code>synchronized</code> 的等待过程不能被中断，如果一个线程在等待锁的过程中被中断，它将不会响应中断而继续等待。</li></ul><p><code>LockSupport</code> 中的 <code>blocker</code> 是一个与线程相关联的对象，它表示导致线程进入阻塞状态的原因或条件。每个线程都可以与一个 <code>blocker</code> 相关联，该 <code>blocker</code> 对象可以帮助你理解线程为什么被阻塞以及在什么情况下会解除阻塞。</p><p>在线程转储（Thread Dump）或调试多线程应用程序时，<code>blocker</code> 字段是线程状态信息的一部分，通常用于了解线程的阻塞原因。以下是关于 <code>blocker</code> 的一些要点：</p><ol><li><strong>等待原因：</strong> 当一个线程进入 <code>WAITING</code> 或 <code>TIMED_WAITING</code> 状态时，线程的 <code>blocker</code> 字段通常指向一个对象，这个对象代表了导致线程等待的原因。例如，在等待一个锁时，<code>blocker</code> 字段可能指向锁对象。在等待一个条件变量时，<code>blocker</code> 字段可能指向与条件变量相关联的对象。</li><li><strong>阻塞原因：</strong> 当一个线程进入 <code>BLOCKED</code> 状态时，线程的 <code>blocker</code> 字段通常指向导致线程被阻塞的锁对象。这可以帮助你识别哪个线程持有了锁，并且哪个线程在等待该锁。</li><li><strong>解除阻塞：</strong> 一旦阻塞条件得到满足，线程将解除阻塞状态。这可能是其他线程释放了锁或满足了某些等待条件。<code>blocker</code> 字段通常在线程解除阻塞后被清除。</li></ol><p>AQS 通过 LockSupport实现线程的阻塞和唤醒</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
